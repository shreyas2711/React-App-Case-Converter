{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","invertText","split","reverse","join","result","removetext","replace","words","trim","length","countwords","Alert","alert","role","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","about","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.df5a6beb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n   \r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          {/* <a className=\"nav-link\" href=\"/about\">{props.about}</a> */}\r\n        </li>\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      {/* <button className=\"btn btn-primary mx-1\">Click to change color</button> */}\r\n      <div className={`form-check form-switch {props.mode==='light'? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes={title:PropTypes.string.isRequired,about:PropTypes.string.isRequired}\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  // const [color,setcolor]=useState('light')\r\n\r\n  // const changecolor=()=>{\r\n  //   if(color==='light'){\r\n  //     document.body.style.backgroundColor='green'\r\n  //   }\r\n  //   else if(color==='green'){\r\n  //     setcolor('light')\r\n  //   }\r\n  // }\r\n  // const [col,setcol]=useState('light')\r\n  // const changecolor=()=>{\r\n  //   if(col==='light'){\r\n  //   setcol('green')\r\n  //   document.body.style.backgroundColor='green'\r\n  //   }\r\n//     else{\r\n//       setcol('light')\r\n//       // setmodetext('Light Mode')\r\n//       document.body.style.backgroundColor='white'\r\n\r\n// }\r\n// }\r\n    const handleUpClick=()=>{\r\n        // console.log(\"Uppercase was clicked\");\r\n        let newText=text.toUpperCase()\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"Success\");\r\n    }\r\n    const handleloClick=()=>{\r\n        // console.log(\"Uppercase was clicked\");\r\n        let newText=text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\",\"Success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n    const invertClick =(event)=>{\r\n        let invertText=text.split(\"\").reverse().join(\"\");\r\n        setText(invertText)\r\n    }\r\n    const whenclick=()=>{\r\n      let removetext=text.replace(text,'');\r\n      setText(removetext)\r\n    }\r\n    const trimm=()=>{\r\n     let result=text.split(/[ ]+/)\r\n      setText(result.join(\" \"))\r\n    }\r\n\r\n   \r\n    \r\n    // const copytext=()=>{\r\n    //   console.log(\"im copy\")\r\n    //   var text=document.getElementById(\"mybox\")\r\n    //   text.select();\r\n    //   text.setSelectionRange(0,9999)\r\n    //   navigator.clipboard.writeText(text.value)\r\n    // }\r\n    const [text,setText]=useState('Enter text here');\r\n    \r\n  const countwords=()=>{\r\n    let words = text.trim().split(\" \").length;\r\n    if (words === 1 && text.split(\" \")[0] === \"\") {\r\n      words = 0;\r\n      return words;\r\n    } else {\r\n      return words;\r\n      \r\n    }\r\n  }\r\n\r\n    // setText=(\"shhsjdh\")\r\n  return (\r\n    <>\r\n    {/* <div className=\"container\" {{color:props.mode==='dark'? 'white':'black' && 'light'?'black':'white'}}> */}\r\n    <div className=\"container\" style={{color:props.mode==='dark'? 'white':'black' && 'light'?'black':'white'}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" style={{backgroundColor:props.mode==='dark'? 'grey':'light' && 'light'?'white':'dark',color:props.mode==='dark'?'white':'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleloClick}>Convert to Lowercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={invertClick}>Click to invert</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={trimm}>Remove WhiteSpace</button> \r\n    <button className=\"btn btn-primary mx-1\" onClick={whenclick}>Click to remove text</button>\r\n    {/* <button className=\"btn btn-primary mx-1\" onClick={changecolor}>Click to change color</button> */}\r\n    {/* <button className=\"btn btn-primary mx-1\" onClick={copytext}>Click to Copy</button> */}\r\n    </div>\r\n\r\n    \r\n    <div className=\"container my-2\"  style={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h2>Your text summary</h2>\r\n      {/* <p>{text.split(\" \").length} words and {text.length} characters</p> */}\r\n      <p>{countwords()} words and {text.length} characters</p>\r\n      \r\n      <p>{0.008 * text.split(\" \").length}Minutes read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter text above to preview your text here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\n// import React {useState} from 'react'\r\nfunction Alert(props) {\r\n    // const capitalize= (word)=>{\r\n    //     const lower=word.toLowerCase(); \r\n    //     return lower.charAt(0).UpperCase()+lower.slice()\r\n    // }\r\n  return (\r\n     props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <strong style={{color:props.mode==='dark'?'white':'black'}}>{props.alert.type}</strong>: {props.alert.msg}\r\n        \r\n     <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\nimport { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [mode,setMode]=useState('light')\n  // const [modetext,setmodetext]=useState('Enable dark mode')\n  const  [alert, setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n  })\n      setTimeout(() => {\n        setAlert(null)\n      }, 1500);\n    \n  }\n\n\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark')\n      // setmodetext('Dark Mode')\n      document.body.style.backgroundColor='#042743'\n      showAlert(\"Dark mode has been activated\",\"success\")  \n    }\n    else{\n      setMode('light')\n      // setmodetext('Light Mode')\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light mode has been activated\",\"success\")  \n    }\n  }\n  return (\n   <>\n   {/* <Router> */}\n<Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert} mode={mode}/>\n<div className=\"container my-3\">\n{/* <Switch> */}\n          {/* <Route path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          \n          {/* </Route> */}\n        {/* </Switch> */}\n  </div>\n {/* </Router> */}\n   </>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}